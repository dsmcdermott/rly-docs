initSidebarItems({"enum":[["Error","An umbrella type for errors returned by a `Parser`."],["InvalidDiscriminant","An error type for discriminants that aren’t large enough"],["ParserError","An umbrella type for the different errors that can occur when generating and writing parsers."],["SrcError","A syntax error in a parser source."],["SyntaxErrorKind","An enum for the kinds of [`SyntaxError`]’s."]],"fn":[["write_from_src","Parses the grammar specification in `src` and writes a parser module to `fout`."]],"macro":[["build_parser","A convenience macro for building parsers in a build script."],["build_parser_with","A macro allowing for building parsers with with specific discriminants."],["parser","A macro for including a parser generated by a [`ParserBuilder`] in a project."]],"mod":[["ast","Types and traits for working with (abstract) syntax trees."],["lex","Re-exports from the crate [`lex`]. Used by generated parsers."],["rly_common","Re-exports from the crate [`rly_common`]. Used by generated parsers."]],"struct":[["BuilderError","A re-export of `rly_common::builders::Error`."],["ParserBuilder","A helper struct for creating parsers using build scripts"],["ParserSpec","A struct representing a compiled collection of LR(1) parser tables."],["Rules","A struct representing a parsed collection of grammar or production rules."],["SyntaxError","A type for syntax errors returned by `Parser`’s."]],"trait":[["FromUsize","A trait for converting from [`usize`] to a discriminant. This is required for generating a `Rules` or `ParserSpec` from a source text."],["IntoUsize","A trait for converting from a discriminant to [`usize`]. This is required for writing a parser using a `ParserSpec`."],["Parser",""],["Prim","An alias for [`Copy`] + [`Hash`] + [`Ord`]."]]});