initSidebarItems({"enum":[["ErrorKind","An enum representing the cause of an [`Error`]."],["LexerBuilderError","An umbrella type for errors encountered when generating and writing lexer modules"],["LexerErrorKind","The different kinds of [`LexerError`]’s."]],"fn":[["build_lexer","Creates a [`LexerBuilder`] and builds a lexer with the default values, returning any errors that occur."],["write_from_reader","Like [`write_from_str`] but reads the text from the specified input `fin`. See the documentation for `write_from_str` for more details."],["write_from_str","Parses the string `text` for a [`LexerWriter`] and then writes the `Lexer` to the output `fout`. See [`LexerWriter::write`] and [`LexerWriter::from_str`] for more detailes"]],"macro":[["lexer","A macro for including a lexer created with a [`LexerBuilder`]. If no name is provided it defaults to the same default `name` for [`LexerBuilder`]’s as described there."]],"mod":[["regex","Re-exports from the [`regex`] crate used by the generated lexers. See the documentation there for more info."],["rly_common","Re-exports from the [`rly_common`] crate used by the generated lexers. See the documentation there for more info."]],"struct":[["Error","An error type used by `Lexer`’s."],["FmtError","A type for syntax errors in Lexer definitions."],["LexerBuilder","A helper struct for creating lexers in build scripts."],["LexerError","A type for errors encountered when creating lexers."],["LexerWriter","A struct that contains a specification of lexing rules and can write out a lexer module."],["Token","The type of tokens returned by `Lexer`’s."]],"trait":[["IntoTokens","A sister trait to [`Lexer`] representing a type that can take an input [`str`] and return a [`Tokens`]."],["Lexer","A trait representing a lexer."],["Tokens","An iterator of tokens (lazily) parsed by and underlying [`Lexer`]."]]});